import jwtDecode from 'jwt-decode'

let jwtDecode;
try {
    jwtDecode = require('jwt-decode');
} catch (e) {
    console.log("jwt-decode is not installed");
}

let tenantRestrictions;
const tenantId = "your tenant id";

  // Extract the access token from the URL hash fragment
  const params = new URLSearchParams(hash.slice(1));
  const access_token = params.get("access_token");


if (!access_token) {
    // redirect to login page
    window.location.href = '/login';
    return;
}

// Fetch the tenant restrictions from the Azure app registration
const tenantRestrictionsUrl = `https://management.azure.com/your-app-registration-id/oauth2PermissionGrants?api-version=1.0`;
fetch(tenantRestrictionsUrl, {
    method: 'GET',
    headers: {
        'Authorization': 'Bearer ' + access_token,
        'Content-Type': 'application/json'
    }
})
.then(handleRateLimiting)
.then(response => response.json())
.then(data => {
    tenantRestrictions = data.value.map(item => item.clientId);
    // Check if the tenantId matches the tenant restrictions
    if(!tenantRestrictions.includes(tenantId)){
        throw new Error("TenantID does not match the tenant restrictions");
    }
})
.catch(error => {
    console.log(error);
    alert("Error fetching tenant restrictions: " + error.message);
});

let requestCount = 0;

// Add a function to handle the rate limiting
function handleRateLimiting(response) {
    // Check if the rate limit has been reached
    if (response.status === 429) {
        // Get the retry-after time in seconds
        const retryAfter = response.headers.get("Retry-After");
        // Wait for the specified time before making another request
        setTimeout(() => {
            requestCount = 0;
        }, retryAfter * 1000);
        throw new Error("Rate limit reached, please try again later.");
    }
    return response;
}

if (!validatePassword(document.getElementById("password").value)) {
    alert("Password must be at least 8 characters, contain uppercase and lowercase letters, at least one number and one special character.");
    return;
}

function validateForm() {
 // Get the form input fields
 const firstName = document.getElementById("first-name").value;
 const lastName = document.getElementById("last-name").value;
 const username = document.getElementById("username").value;
 const password = document.getElementById("password").value;

 // Check if the form input fields are not empty
 if (!firstName || !lastName || !username || !password) {
   alert("All fields are required.");
   return false;
 }

 // Check if the password meets the requirements
 if (!validatePassword(password)) {
   alert("Password must be at least 8 characters, contain uppercase and lowercase letters, at least one number and one special character.");
   return false;
 }

 return true;
}
  

function validatePassword(password) {
    const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/;
    if (password.match(passwordRegex)) {
      return true;
    }
    return false;
  }
  
  // Add an event listener to the form to handle the submit event
document.getElementById("create-user-form").addEventListener("submit", function(event) {
  event.preventDefault();

    // Validate the form input fields
    if (!validateForm()) {
        return;
      }

  // Validate the form input fields
  const firstName = document.getElementById("first-name").value;
  const lastName = document.getElementById("last-name").value;
  const username = document.getElementById("username").value;
  const password = document.getElementById("password").value;
  const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/;
  let isFormValid = true;
  if (!firstName) {
    alert("Please enter a first name.");
    isFormValid = false;
  } else if (!lastName) {
    alert("Please enter a last name.");
    isFormValid = false;
  } else if (!username) {
    alert("Please enter a username.");
    isFormValid = false;
  } else if (!password) {
    alert("Please enter a password.");
    isFormValid = false;
  } else if (!passwordRegex.test(password)) {
    alert("Password must be at least 8 characters, contain uppercase and lowercase letters, at least one number and one special character.");
    isFormValid = false;
  }

  if (!isFormValid) {
    return;
  }

  // Check for rate-limiting
  if (requestCount >= 5) {
    alert("Too many requests, please try again later.");
    return;
  }
  requestCount++;
  
  // Extract the access token from the URL hash fragment
  var hash = window.location.hash;
  var access_token = hash.substring(hash.indexOf("access_token=") + "access_token=".length, hash.indexOf("&"));
  
  // Use the access token to call the Microsoft Graph API
  var headers = new Headers();
  headers.append("Authorization", "Bearer " + access_token);
  headers.append("Content-Type", "application/json");
  
  let tenantId;
// Extract the tenant ID from the access token
const decodedAccessToken = jwtDecode(access_token);
if (decodedAccessToken) {
    tenantId = decodedAccessToken.tid;

    // Use the tenant ID to construct the userPrincipalName
    const userPrincipalName = `${username}@${tenantId}.onmicrosoft.com`;
}

// Add the userPrincipalName to the userDetails object
var userDetails = {
    accountEnabled: true,
    displayName: firstName + " " + lastName,
    mailNickname: username,
    passwordProfile: {
        password: password,
        forceChangePasswordNextSignIn: true
    },
    userPrincipalName: userPrincipalName,
    usageLocation: "US"
};

if(!username){
    console.error('username is not defined');
    return;
  }

// Use the tenant ID to construct the userPrincipalName
const userPrincipalName = `${username}@${tenantId}.onmicrosoft.com`;

  var userDetails = {
    accountEnabled: true,
    displayName: firstName + " " + lastName,
    mailNickname: username,
    passwordProfile: {
      password: password,
      forceChangePasswordNextSignIn: true
    },
    userPrincipalName: userPrincipalName,
    usageLocation: "US"
  };

// Make the request to create the user
  const createUserUrl = `https://graph.microsoft.com/v1.0/users`;
  fetch(createUserUrl, {
    method: 'POST',
    headers: {
        'Authorization': 'Bearer ' + access_token,
        'Content-Type': 'application/json'
    },
    body: JSON.stringify({
        accountEnabled: true,
        displayName: `${firstName} ${lastName}`,
        mailNickname: username,
        passwordProfile: {
            forceChangePasswordNextSignIn: true,
            password: password
        },
        userPrincipalName: userPrincipalName
    })
  })
  .then(response => {
    if (!response.ok) {
      throw new Error(response.statusText);
    }
    return response.json();
  })
  .then(data => {
    console.log("User created successfully:", data);
    // Redirect to the dashboard or display a success message
  })
  .catch(error => {
    console.log(error);
    alert("Error creating user: " + error.message);
  });
});

function validateForm() {
    // Get the form input fields
    const firstName = document.getElementById("first-name").value;
    const lastName = document.getElementById("last-name").value;
    const username = document.getElementById("username").value;
    const password = document.getElementById("password").value;
  
    // Check if the form input fields are not empty
    if (!firstName || !lastName || !username || !password) {
      alert("Please fill in all the form fields.");
      return false;
    }
  
    // Check if the password meets the required criteria
    if (!/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/.test(password)) {
      alert("Password must have at least 8 characters, uppercase letters, lowercase letters, numbers, and special symbols.");
      return false;
    }
    return true;
  }

function validateLicense(license) {
    // Check if the license input is in the correct format 'skuId:tenantId'
    const licenseFormat = /^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}:[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$/;
    if (!licenseFormat.test(license)) {
        return false;
    }
    return true;
}
